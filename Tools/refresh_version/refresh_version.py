# -*- coding: utf-8 -*-

#
# ================================================================================
# (c) Copyright 2021 Renwei All rights reserved.
# --------------------------------------------------------------------------------
#
# 2021.03.11.
#
import re
import platform
import time
import uuid
import socket
import traceback
import getpass
import sys
import os.path


def_c_verno_head_file="\
/*\n\
 * ================================================================================\n\
 * (c) Copyright 2022 Renwei All rights reserved.\n\
 * --------------------------------------------------------------------------------\n\
 * 2022.03.10.\n\
 *\n\
 * ############################# IMPORTANT INFORMATION ############################\n\
 * The code of this file is automatically generated by tools(Tools/refresh_version),\n\
 * please do not modify it manually!\n\
 * ############################# IMPORTANT INFORMATION ############################\n\
 * ================================================================================\n\
 */\n\
\n\
#ifndef __DAVE_VERNO_H__\n\
#define __DAVE_VERNO_H__\n\
#include \"verno_macro.h\"\n\
#include \"dave_base.h\"\n\n"

def_c_verno_end_file="#endif\n\n"


def get_split_data(split_rules, file_content):
    return re.findall(split_rules, file_content)[0]


def load_verno_file(verno_file):
    if os.path.exists(verno_file) == False:
        print(f'open {verno_file} failed!')
        return None, None, None

    with open(verno_file, "r") as file_id:
        file_content = file_id.read()
        split_data = file_content.split('\n')
        MAIN = split_data[0].split(' ', 1)[-1].strip()
        SUB = split_data[1].split(' ', 1)[-1].strip()
        REV = split_data[2].split(' ', 1)[-1].strip()
    return MAIN, SUB, REV


def touch_file(file):
    if os.path.exists(file) == False:
        return

    command="touch -c "+file
    os.system(command)
    return


def file_exists(file):
    if os.path.exists(file) == False:
        print(f'\033[33mfile:{file} does not exist!\033[0m')
        return False
    return True


def update_c_verno_file(c_verno_inc_file, c_verno_src_file, projectname, MAIN, SUB, REV):
    if file_exists(c_verno_inc_file) == False:
        return

    with open(c_verno_inc_file, "w") as file_id:
        file_id.write(def_c_verno_head_file)
        file_id.write(f'#define VERSION_PRODUCT "{projectname}"\n\n')
        file_id.write(f'#ifdef __VERNO_PC_LINUX__\n')
        file_id.write(f' #define VERSION_MISC "linux"\n')
        file_id.write(f'#else\n')
        file_id.write(f' #error Please define valid misc version!!!\n')
        file_id.write(f'#endif\n\n')
        file_id.write(f'#define VERSION_MAIN "{MAIN}"\n')
        file_id.write(f'#if defined(__VERNO_ALPHA_VERSION__)\n')
        file_id.write(f' #define VERSION_SUB "{SUB}"\n')
        file_id.write(f'#else\n')
        file_id.write(f' #define VERSION_SUB "{str(int(SUB) + 1)}"\n')
        file_id.write(f'#endif\n')
        file_id.write(f'#define VERSION_REV "{REV}"\n\n')
        file_id.write(f'#define VERSION_DATE_TIME \"{time.strftime("%Y%m%d%H%M%S", time.localtime())}\"\n\n')
        file_id.write(f'#ifdef __VERNO_ALPHA_VERSION__\n')
        file_id.write(f' #define VERSION_LEVEL "Alpha"\n')
        file_id.write(f'#elif defined(__VERNO_BETA_VERSION__)\n')
        file_id.write(f' #define VERSION_LEVEL "Beta"\n')
        file_id.write(f'#endif\n\n')
        file_id.write(f'#define __BUILD_MAC_ADDRESS__ \"{uuid.UUID(int=uuid.getnode()).hex[-12:].upper()}\"\n')
        file_id.write(f'#define __BUILD_HOSTNAME__ \"{socket.getfqdn(socket.gethostname())}\"\n')
        file_id.write(f'#define __BUILD_USERNAME__ \"{getpass.getuser()}\"\n\n')
        file_id.write(f's8 * dave_verno(void);\n')
        file_id.write(f's8 * dave_verno_product(s8 *verno, s8 *buf_ptr, ub buf_len);\n\n')
        file_id.write(def_c_verno_end_file)

    touch_file(c_verno_src_file)
    return


def update_go_verno_file(go_verno_file, projectname, MAIN, SUB, REV):
    if file_exists(go_verno_file) == False:
        return
    if projectname == None:
        return

    with open(go_verno_file, "r") as file_id:
        file_content = file_id.read()
        start_split_data = get_split_data("(var VERSION_PRODUCT = \".*?\"\n)", file_content)
        end_split_data = get_split_data("(var VERSION_DATE_TIME = \".*?\"\n)", file_content)
        start_file_data = file_content.split(start_split_data)[0]
        end_file_data = file_content.split(end_split_data)[-1]
    with open(go_verno_file, "w") as file_id:
        file_id.write(start_file_data)
        file_id.write("var VERSION_PRODUCT = \""+projectname+"\"\n")
        file_id.write("var VERSION_MISC = strings.Replace(tools.T_sys_go_version(), \".\", \"-\", -1)\n")
        file_id.write("var VERSION_MAIN = \""+MAIN+"\"\n")
        file_id.write("var VERSION_SUB = \""+SUB+"\"\n")
        file_id.write("var VERSION_REV = \""+REV+"\"\n")
        file_id.write("var VERSION_DATE_TIME = \""+time.strftime("%Y%m%d%H%M%S", time.localtime())+"\"\n")
        file_id.write(end_file_data)
    return


def update_py_verno_file(py_verno_file, MAIN, SUB, REV):
    if file_exists(py_verno_file) == False:
        return

    with open(py_verno_file, "r") as file_id:
        file_content = file_id.read()
        start_split_data = get_split_data("(VERSION_MAIN=\".*?\"\n)", file_content)
        end_split_data = get_split_data("(VERSION_REV=\".*?\"\n)", file_content)
        start_file_data = file_content.split(start_split_data)[0]
        end_file_data = file_content.split(end_split_data)[-1]
    with open(py_verno_file, "w") as file_id:
        file_id.write(start_file_data)
        file_id.write("VERSION_MAIN=\""+MAIN+"\"\n")
        file_id.write("    VERSION_SUB=\""+SUB+"\"\n")
        file_id.write("    VERSION_REV=\""+REV+"\"\n")
        file_id.write(end_file_data)
    return


def refresh_version(root_path, projectname):
    verno_file = root_path+"VERSION"
    c_verno_inc_file = root_path+"C/project/dave/verno/inc/dave_verno.h"
    c_verno_src_file = root_path+"C/project/dave/verno/src/dave_verno.c"
    go_verno_file = root_path+"Go/project/dave/base/dave_verno.go"
    py_verno_file = root_path+"Python/project/dave/base/dave_verno.py"

    MAIN, SUB, REV = load_verno_file(verno_file)
    if MAIN == None or SUB == None or REV == None:
        return

    update_c_verno_file(c_verno_inc_file, c_verno_src_file, projectname, MAIN, SUB, REV)
    update_go_verno_file(go_verno_file, projectname, MAIN, SUB, REV)
    update_py_verno_file(py_verno_file, MAIN, SUB, REV)
    return


if __name__ == '__main__':
    try:
        if len(sys.argv) <= 1:
            refresh_version('../../../', None)
        elif len(sys.argv) == 2:
            refresh_version(sys.argv[1], None)
        else:
            refresh_version(sys.argv[1], sys.argv[2])
    except:
        traceback.print_exc()