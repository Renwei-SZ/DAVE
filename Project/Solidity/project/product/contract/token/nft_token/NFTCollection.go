// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package mytoken

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// MytokenMetaData contains all meta data concerning the Mytoken contract.
var MytokenMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_PER_MINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"mintNFTs\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"reserveNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseTokenURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162004ace38038062004ace8339818101604052810190620000379190620003da565b818181600090816200004a9190620006de565b5080600190816200005c9190620006de565b5050506200007f620000736200009960201b60201c565b620000a160201b60201c565b62000090836200016760201b60201c565b50505062000848565b600033905090565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b620001776200018c60201b60201c565b80600c9081620001889190620006de565b5050565b6200019c6200009960201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620001c26200021d60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16146200021b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002129062000826565b60405180910390fd5b565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002b08262000265565b810181811067ffffffffffffffff82111715620002d257620002d162000276565b5b80604052505050565b6000620002e762000247565b9050620002f58282620002a5565b919050565b600067ffffffffffffffff82111562000318576200031762000276565b5b620003238262000265565b9050602081019050919050565b60005b838110156200035057808201518184015260208101905062000333565b60008484015250505050565b6000620003736200036d84620002fa565b620002db565b90508281526020810184848401111562000392576200039162000260565b5b6200039f84828562000330565b509392505050565b600082601f830112620003bf57620003be6200025b565b5b8151620003d18482602086016200035c565b91505092915050565b600080600060608486031215620003f657620003f562000251565b5b600084015167ffffffffffffffff81111562000417576200041662000256565b5b6200042586828701620003a7565b935050602084015167ffffffffffffffff81111562000449576200044862000256565b5b6200045786828701620003a7565b925050604084015167ffffffffffffffff8111156200047b576200047a62000256565b5b6200048986828701620003a7565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620004e657607f821691505b602082108103620004fc57620004fb6200049e565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620005667fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000527565b62000572868362000527565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620005bf620005b9620005b3846200058a565b62000594565b6200058a565b9050919050565b6000819050919050565b620005db836200059e565b620005f3620005ea82620005c6565b84845462000534565b825550505050565b600090565b6200060a620005fb565b62000617818484620005d0565b505050565b5b818110156200063f576200063360008262000600565b6001810190506200061d565b5050565b601f8211156200068e57620006588162000502565b620006638462000517565b8101602085101562000673578190505b6200068b620006828562000517565b8301826200061c565b50505b505050565b600082821c905092915050565b6000620006b36000198460080262000693565b1980831691505092915050565b6000620006ce8383620006a0565b9150826002028217905092915050565b620006e98262000493565b67ffffffffffffffff81111562000705576200070462000276565b5b620007118254620004cd565b6200071e82828562000643565b600060209050601f83116001811462000756576000841562000741578287015190505b6200074d8582620006c0565b865550620007bd565b601f198416620007668662000502565b60005b82811015620007905784890151825560018201915060208501945060208101905062000769565b86831015620007b05784890151620007ac601f891682620006a0565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006200080e602083620007c5565b91506200081b82620007d6565b602082019050919050565b600060208201905081810360008301526200084181620007ff565b9050919050565b61427680620008586000396000f3fe6080604052600436106101b75760003560e01c80636352211e116100ec578063a22cb4651161008a578063c87b56dd11610064578063c87b56dd146105f0578063d547cfb71461062d578063e985e9c514610658578063f2fde38b14610695576101b7565b8063a22cb46514610575578063b88d4fde1461059e578063bc7df091146105c7576101b7565b80638462151c116100c65780638462151c146104b75780638d859f3e146104f45780638da5cb5b1461051f57806395d89b411461054a576101b7565b80636352211e1461042657806370a0823114610463578063715018a6146104a0576101b7565b80632f745c59116101595780633ccfd60b116101335780633ccfd60b1461038d57806342842e0e146103975780634f6ccce7146103c057806355f804b3146103fd576101b7565b80632f745c591461030957806332cb6b0c146103465780633b4b138114610371576101b7565b8063095ea7b311610195578063095ea7b31461026157806309d42b301461028a57806318160ddd146102b557806323b872dd146102e0576101b7565b806301ffc9a7146101bc57806306fdde03146101f9578063081812fc14610224575b600080fd5b3480156101c857600080fd5b506101e360048036038101906101de91906129dd565b6106be565b6040516101f09190612a25565b60405180910390f35b34801561020557600080fd5b5061020e610738565b60405161021b9190612ad0565b60405180910390f35b34801561023057600080fd5b5061024b60048036038101906102469190612b28565b6107ca565b6040516102589190612b96565b60405180910390f35b34801561026d57600080fd5b5061028860048036038101906102839190612bdd565b610810565b005b34801561029657600080fd5b5061029f610927565b6040516102ac9190612c2c565b60405180910390f35b3480156102c157600080fd5b506102ca61092c565b6040516102d79190612c2c565b60405180910390f35b3480156102ec57600080fd5b5061030760048036038101906103029190612c47565b610939565b005b34801561031557600080fd5b50610330600480360381019061032b9190612bdd565b610999565b60405161033d9190612c2c565b60405180910390f35b34801561035257600080fd5b5061035b610a3e565b6040516103689190612c2c565b60405180910390f35b61038b60048036038101906103869190612b28565b610a43565b005b610395610b7d565b005b3480156103a357600080fd5b506103be60048036038101906103b99190612c47565b610c7d565b005b3480156103cc57600080fd5b506103e760048036038101906103e29190612b28565b610c9d565b6040516103f49190612c2c565b60405180910390f35b34801561040957600080fd5b50610424600480360381019061041f9190612dcf565b610d0e565b005b34801561043257600080fd5b5061044d60048036038101906104489190612b28565b610d29565b60405161045a9190612b96565b60405180910390f35b34801561046f57600080fd5b5061048a60048036038101906104859190612e18565b610daf565b6040516104979190612c2c565b60405180910390f35b3480156104ac57600080fd5b506104b5610e66565b005b3480156104c357600080fd5b506104de60048036038101906104d99190612e18565b610e7a565b6040516104eb9190612f03565b60405180910390f35b34801561050057600080fd5b50610509610f28565b6040516105169190612c2c565b60405180910390f35b34801561052b57600080fd5b50610534610f32565b6040516105419190612b96565b60405180910390f35b34801561055657600080fd5b5061055f610f5c565b60405161056c9190612ad0565b60405180910390f35b34801561058157600080fd5b5061059c60048036038101906105979190612f51565b610fee565b005b3480156105aa57600080fd5b506105c560048036038101906105c09190613032565b611004565b005b3480156105d357600080fd5b506105ee60048036038101906105e99190612b28565b611066565b005b3480156105fc57600080fd5b5061061760048036038101906106129190612b28565b6110fc565b6040516106249190612ad0565b60405180910390f35b34801561063957600080fd5b50610642611164565b60405161064f9190612ad0565b60405180910390f35b34801561066457600080fd5b5061067f600480360381019061067a91906130b5565b6111f2565b60405161068c9190612a25565b60405180910390f35b3480156106a157600080fd5b506106bc60048036038101906106b79190612e18565b611286565b005b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610731575061073082611309565b5b9050919050565b60606000805461074790613124565b80601f016020809104026020016040519081016040528092919081815260200182805461077390613124565b80156107c05780601f10610795576101008083540402835291602001916107c0565b820191906000526020600020905b8154815290600101906020018083116107a357829003601f168201915b5050505050905090565b60006107d5826113eb565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061081b82610d29565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361088b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610882906131c7565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166108aa611436565b73ffffffffffffffffffffffffffffffffffffffff1614806108d957506108d8816108d3611436565b6111f2565b5b610918576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090f90613259565b60405180910390fd5b610922838361143e565b505050565b600581565b6000600880549050905090565b61094a610944611436565b826114f7565b610989576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610980906132eb565b60405180910390fd5b61099483838361158c565b505050565b60006109a483610daf565b82106109e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109dc9061337d565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b600a81565b6000610a4f600b611885565b9050600a610a66838361189390919063ffffffff16565b1115610aa7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9e906133e9565b60405180910390fd5b600082118015610ab8575060058211155b610af7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aee9061347b565b60405180910390fd5b610b10826509184e72a0006118a990919063ffffffff16565b341015610b52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b499061350d565b60405180910390fd5b60005b82811015610b7857610b656118bf565b8080610b709061355c565b915050610b55565b505050565b610b856118e4565b600047905060008111610bcd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc4906135f0565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff1682604051610bf390613641565b60006040518083038185875af1925050503d8060008114610c30576040519150601f19603f3d011682016040523d82523d6000602084013e610c35565b606091505b5050905080610c79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c70906136a2565b60405180910390fd5b5050565b610c9883838360405180602001604052806000815250611004565b505050565b6000610ca761092c565b8210610ce8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cdf90613734565b60405180910390fd5b60088281548110610cfc57610cfb613754565b5b90600052602060002001549050919050565b610d166118e4565b80600c9081610d25919061392f565b5050565b600080610d3583611962565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610da6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9d90613a4d565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1690613adf565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610e6e6118e4565b610e78600061199f565b565b60606000610e8783610daf565b905060008167ffffffffffffffff811115610ea557610ea4612ca4565b5b604051908082528060200260200182016040528015610ed35781602001602082028036833780820191505090505b50905060005b82811015610f1d57610eeb8582610999565b828281518110610efe57610efd613754565b5b6020026020010181815250508080610f159061355c565b915050610ed9565b508092505050919050565b6509184e72a00081565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610f6b90613124565b80601f0160208091040260200160405190810160405280929190818152602001828054610f9790613124565b8015610fe45780601f10610fb957610100808354040283529160200191610fe4565b820191906000526020600020905b815481529060010190602001808311610fc757829003601f168201915b5050505050905090565b611000610ff9611436565b8383611a65565b5050565b61101561100f611436565b836114f7565b611054576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104b906132eb565b60405180910390fd5b61106084848484611bd1565b50505050565b61106e6118e4565b600061107a600b611885565b9050600a611091838361189390919063ffffffff16565b106110d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c890613b4b565b60405180910390fd5b60005b828110156110f7576110e46118bf565b80806110ef9061355c565b9150506110d4565b505050565b6060611107826113eb565b6000611111611c2d565b90506000815111611131576040518060200160405280600081525061115c565b8061113b84611cbf565b60405160200161114c929190613ba7565b6040516020818303038152906040525b915050919050565b600c805461117190613124565b80601f016020809104026020016040519081016040528092919081815260200182805461119d90613124565b80156111ea5780601f106111bf576101008083540402835291602001916111ea565b820191906000526020600020905b8154815290600101906020018083116111cd57829003601f168201915b505050505081565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61128e6118e4565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036112fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f490613c3d565b60405180910390fd5b6113068161199f565b50565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806113d457507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806113e457506113e382611d8d565b5b9050919050565b6113f481611df7565b611433576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142a90613a4d565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166114b183610d29565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061150383610d29565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611545575061154481856111f2565b5b8061158357508373ffffffffffffffffffffffffffffffffffffffff1661156b846107ca565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166115ac82610d29565b73ffffffffffffffffffffffffffffffffffffffff1614611602576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f990613ccf565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611671576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166890613d61565b60405180910390fd5b61167e8383836001611e38565b8273ffffffffffffffffffffffffffffffffffffffff1661169e82610d29565b73ffffffffffffffffffffffffffffffffffffffff16146116f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116eb90613ccf565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46118808383836001611f96565b505050565b600081600001549050919050565b600081836118a19190613d81565b905092915050565b600081836118b79190613db5565b905092915050565b60006118cb600b611885565b90506118d73382611f9c565b6118e1600b611fba565b50565b6118ec611436565b73ffffffffffffffffffffffffffffffffffffffff1661190a610f32565b73ffffffffffffffffffffffffffffffffffffffff1614611960576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195790613e43565b60405180910390fd5b565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611ad3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aca90613eaf565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611bc49190612a25565b60405180910390a3505050565b611bdc84848461158c565b611be884848484611fd0565b611c27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1e90613f41565b60405180910390fd5b50505050565b6060600c8054611c3c90613124565b80601f0160208091040260200160405190810160405280929190818152602001828054611c6890613124565b8015611cb55780601f10611c8a57610100808354040283529160200191611cb5565b820191906000526020600020905b815481529060010190602001808311611c9857829003601f168201915b5050505050905090565b606060006001611cce84612157565b01905060008167ffffffffffffffff811115611ced57611cec612ca4565b5b6040519080825280601f01601f191660200182016040528015611d1f5781602001600182028036833780820191505090505b509050600082602001820190505b600115611d82578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611d7657611d75613f61565b5b04945060008503611d2d575b819350505050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16611e1983611962565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b611e44848484846122aa565b6001811115611e88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e7f90614002565b60405180910390fd5b6000829050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603611ecf57611eca816123d0565b611f0e565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614611f0d57611f0c8582612419565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611f5057611f4b81612586565b611f8f565b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611f8e57611f8d8482612657565b5b5b5050505050565b50505050565b611fb68282604051806020016040528060008152506126d6565b5050565b6001816000016000828254019250508190555050565b6000611ff18473ffffffffffffffffffffffffffffffffffffffff16612731565b1561214a578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261201a611436565b8786866040518563ffffffff1660e01b815260040161203c9493929190614077565b6020604051808303816000875af192505050801561207857506040513d601f19601f8201168201806040525081019061207591906140d8565b60015b6120fa573d80600081146120a8576040519150601f19603f3d011682016040523d82523d6000602084013e6120ad565b606091505b5060008151036120f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120e990613f41565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061214f565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106121b5577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816121ab576121aa613f61565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106121f2576d04ee2d6d415b85acef810000000083816121e8576121e7613f61565b5b0492506020810190505b662386f26fc10000831061222157662386f26fc10000838161221757612216613f61565b5b0492506010810190505b6305f5e100831061224a576305f5e10083816122405761223f613f61565b5b0492506008810190505b612710831061226f57612710838161226557612264613f61565b5b0492506004810190505b60648310612292576064838161228857612287613f61565b5b0492506002810190505b600a83106122a1576001810190505b80915050919050565b60018111156123ca57600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461233e5780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546123369190614105565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146123c95780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546123c19190613d81565b925050819055505b5b50505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b6000600161242684610daf565b6124309190614105565b9050600060076000848152602001908152602001600020549050818114612515576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b6000600160088054905061259a9190614105565b90506000600960008481526020019081526020016000205490506000600883815481106125ca576125c9613754565b5b9060005260206000200154905080600883815481106125ec576125eb613754565b5b90600052602060002001819055508160096000838152602001908152602001600020819055506009600085815260200190815260200160002060009055600880548061263b5761263a614139565b5b6001900381819060005260206000200160009055905550505050565b600061266283610daf565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b6126e08383612754565b6126ed6000848484611fd0565b61272c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161272390613f41565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036127c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127ba906141b4565b60405180910390fd5b6127cc81611df7565b1561280c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161280390614220565b60405180910390fd5b61281a600083836001611e38565b61282381611df7565b15612863576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161285a90614220565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461296d600083836001611f96565b5050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6129ba81612985565b81146129c557600080fd5b50565b6000813590506129d7816129b1565b92915050565b6000602082840312156129f3576129f261297b565b5b6000612a01848285016129c8565b91505092915050565b60008115159050919050565b612a1f81612a0a565b82525050565b6000602082019050612a3a6000830184612a16565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612a7a578082015181840152602081019050612a5f565b60008484015250505050565b6000601f19601f8301169050919050565b6000612aa282612a40565b612aac8185612a4b565b9350612abc818560208601612a5c565b612ac581612a86565b840191505092915050565b60006020820190508181036000830152612aea8184612a97565b905092915050565b6000819050919050565b612b0581612af2565b8114612b1057600080fd5b50565b600081359050612b2281612afc565b92915050565b600060208284031215612b3e57612b3d61297b565b5b6000612b4c84828501612b13565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612b8082612b55565b9050919050565b612b9081612b75565b82525050565b6000602082019050612bab6000830184612b87565b92915050565b612bba81612b75565b8114612bc557600080fd5b50565b600081359050612bd781612bb1565b92915050565b60008060408385031215612bf457612bf361297b565b5b6000612c0285828601612bc8565b9250506020612c1385828601612b13565b9150509250929050565b612c2681612af2565b82525050565b6000602082019050612c416000830184612c1d565b92915050565b600080600060608486031215612c6057612c5f61297b565b5b6000612c6e86828701612bc8565b9350506020612c7f86828701612bc8565b9250506040612c9086828701612b13565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612cdc82612a86565b810181811067ffffffffffffffff82111715612cfb57612cfa612ca4565b5b80604052505050565b6000612d0e612971565b9050612d1a8282612cd3565b919050565b600067ffffffffffffffff821115612d3a57612d39612ca4565b5b612d4382612a86565b9050602081019050919050565b82818337600083830152505050565b6000612d72612d6d84612d1f565b612d04565b905082815260208101848484011115612d8e57612d8d612c9f565b5b612d99848285612d50565b509392505050565b600082601f830112612db657612db5612c9a565b5b8135612dc6848260208601612d5f565b91505092915050565b600060208284031215612de557612de461297b565b5b600082013567ffffffffffffffff811115612e0357612e02612980565b5b612e0f84828501612da1565b91505092915050565b600060208284031215612e2e57612e2d61297b565b5b6000612e3c84828501612bc8565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612e7a81612af2565b82525050565b6000612e8c8383612e71565b60208301905092915050565b6000602082019050919050565b6000612eb082612e45565b612eba8185612e50565b9350612ec583612e61565b8060005b83811015612ef6578151612edd8882612e80565b9750612ee883612e98565b925050600181019050612ec9565b5085935050505092915050565b60006020820190508181036000830152612f1d8184612ea5565b905092915050565b612f2e81612a0a565b8114612f3957600080fd5b50565b600081359050612f4b81612f25565b92915050565b60008060408385031215612f6857612f6761297b565b5b6000612f7685828601612bc8565b9250506020612f8785828601612f3c565b9150509250929050565b600067ffffffffffffffff821115612fac57612fab612ca4565b5b612fb582612a86565b9050602081019050919050565b6000612fd5612fd084612f91565b612d04565b905082815260208101848484011115612ff157612ff0612c9f565b5b612ffc848285612d50565b509392505050565b600082601f83011261301957613018612c9a565b5b8135613029848260208601612fc2565b91505092915050565b6000806000806080858703121561304c5761304b61297b565b5b600061305a87828801612bc8565b945050602061306b87828801612bc8565b935050604061307c87828801612b13565b925050606085013567ffffffffffffffff81111561309d5761309c612980565b5b6130a987828801613004565b91505092959194509250565b600080604083850312156130cc576130cb61297b565b5b60006130da85828601612bc8565b92505060206130eb85828601612bc8565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061313c57607f821691505b60208210810361314f5761314e6130f5565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006131b1602183612a4b565b91506131bc82613155565b604082019050919050565b600060208201905081810360008301526131e0816131a4565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000613243603d83612a4b565b915061324e826131e7565b604082019050919050565b6000602082019050818103600083015261327281613236565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b60006132d5602d83612a4b565b91506132e082613279565b604082019050919050565b60006020820190508181036000830152613304816132c8565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b6000613367602b83612a4b565b91506133728261330b565b604082019050919050565b600060208201905081810360008301526133968161335a565b9050919050565b7f5468697320636f6c6c656374696f6e20697320736f6c64206f75742100000000600082015250565b60006133d3601c83612a4b565b91506133de8261339d565b602082019050919050565b60006020820190508181036000830152613402816133c6565b9050919050565b7f596f75206861766520726563656976656420746865206d6178696d756d20616d60008201527f6f756e74206f66204e46547320616c6c6f7765642e0000000000000000000000602082015250565b6000613465603583612a4b565b915061347082613409565b604082019050919050565b6000602082019050818103600083015261349481613458565b9050919050565b7f4e6f7420656e6f75676820657468657220746f207075726368617365204e465460008201527f732e000000000000000000000000000000000000000000000000000000000000602082015250565b60006134f7602283612a4b565b91506135028261349b565b604082019050919050565b60006020820190508181036000830152613526816134ea565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061356782612af2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036135995761359861352d565b5b600182019050919050565b7f4e6f206574686572206c65667420746f20776974686472617700000000000000600082015250565b60006135da601983612a4b565b91506135e5826135a4565b602082019050919050565b60006020820190508181036000830152613609816135cd565b9050919050565b600081905092915050565b50565b600061362b600083613610565b91506136368261361b565b600082019050919050565b600061364c8261361e565b9150819050919050565b7f5472616e73666572206661696c65642e00000000000000000000000000000000600082015250565b600061368c601083612a4b565b915061369782613656565b602082019050919050565b600060208201905081810360008301526136bb8161367f565b9050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b600061371e602c83612a4b565b9150613729826136c2565b604082019050919050565b6000602082019050818103600083015261374d81613711565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026137e57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826137a8565b6137ef86836137a8565b95508019841693508086168417925050509392505050565b6000819050919050565b600061382c61382761382284612af2565b613807565b612af2565b9050919050565b6000819050919050565b61384683613811565b61385a61385282613833565b8484546137b5565b825550505050565b600090565b61386f613862565b61387a81848461383d565b505050565b5b8181101561389e57613893600082613867565b600181019050613880565b5050565b601f8211156138e3576138b481613783565b6138bd84613798565b810160208510156138cc578190505b6138e06138d885613798565b83018261387f565b50505b505050565b600082821c905092915050565b6000613906600019846008026138e8565b1980831691505092915050565b600061391f83836138f5565b9150826002028217905092915050565b61393882612a40565b67ffffffffffffffff81111561395157613950612ca4565b5b61395b8254613124565b6139668282856138a2565b600060209050601f8311600181146139995760008415613987578287015190505b6139918582613913565b8655506139f9565b601f1984166139a786613783565b60005b828110156139cf578489015182556001820191506020850194506020810190506139aa565b868310156139ec57848901516139e8601f8916826138f5565b8355505b6001600288020188555050505b505050505050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000613a37601883612a4b565b9150613a4282613a01565b602082019050919050565b60006020820190508181036000830152613a6681613a2a565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000613ac9602983612a4b565b9150613ad482613a6d565b604082019050919050565b60006020820190508181036000830152613af881613abc565b9050919050565b7f4e6f7420656e6f756768204e465473206c65667420746f207265736572766500600082015250565b6000613b35601f83612a4b565b9150613b4082613aff565b602082019050919050565b60006020820190508181036000830152613b6481613b28565b9050919050565b600081905092915050565b6000613b8182612a40565b613b8b8185613b6b565b9350613b9b818560208601612a5c565b80840191505092915050565b6000613bb38285613b76565b9150613bbf8284613b76565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613c27602683612a4b565b9150613c3282613bcb565b604082019050919050565b60006020820190508181036000830152613c5681613c1a565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000613cb9602583612a4b565b9150613cc482613c5d565b604082019050919050565b60006020820190508181036000830152613ce881613cac565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000613d4b602483612a4b565b9150613d5682613cef565b604082019050919050565b60006020820190508181036000830152613d7a81613d3e565b9050919050565b6000613d8c82612af2565b9150613d9783612af2565b9250828201905080821115613daf57613dae61352d565b5b92915050565b6000613dc082612af2565b9150613dcb83612af2565b9250828202613dd981612af2565b91508282048414831517613df057613def61352d565b5b5092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613e2d602083612a4b565b9150613e3882613df7565b602082019050919050565b60006020820190508181036000830152613e5c81613e20565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000613e99601983612a4b565b9150613ea482613e63565b602082019050919050565b60006020820190508181036000830152613ec881613e8c565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000613f2b603283612a4b565b9150613f3682613ecf565b604082019050919050565b60006020820190508181036000830152613f5a81613f1e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f455243373231456e756d657261626c653a20636f6e736563757469766520747260008201527f616e7366657273206e6f7420737570706f727465640000000000000000000000602082015250565b6000613fec603583612a4b565b9150613ff782613f90565b604082019050919050565b6000602082019050818103600083015261401b81613fdf565b9050919050565b600081519050919050565b600082825260208201905092915050565b600061404982614022565b614053818561402d565b9350614063818560208601612a5c565b61406c81612a86565b840191505092915050565b600060808201905061408c6000830187612b87565b6140996020830186612b87565b6140a66040830185612c1d565b81810360608301526140b8818461403e565b905095945050505050565b6000815190506140d2816129b1565b92915050565b6000602082840312156140ee576140ed61297b565b5b60006140fc848285016140c3565b91505092915050565b600061411082612af2565b915061411b83612af2565b92508282039050818111156141335761413261352d565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b600061419e602083612a4b565b91506141a982614168565b602082019050919050565b600060208201905081810360008301526141cd81614191565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b600061420a601c83612a4b565b9150614215826141d4565b602082019050919050565b60006020820190508181036000830152614239816141fd565b905091905056fea264697066735822122016d24474f92ab1d2d08c499ad7e14493104dcd63f088434697d12f5b01ea51e064736f6c63430008110033",
}

// MytokenABI is the input ABI used to generate the binding from.
// Deprecated: Use MytokenMetaData.ABI instead.
var MytokenABI = MytokenMetaData.ABI

// MytokenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MytokenMetaData.Bin instead.
var MytokenBin = MytokenMetaData.Bin

// DeployMytoken deploys a new Ethereum contract, binding an instance of Mytoken to it.
func DeployMytoken(auth *bind.TransactOpts, backend bind.ContractBackend, baseURI string, name string, symbol string) (common.Address, *types.Transaction, *Mytoken, error) {
	parsed, err := MytokenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MytokenBin), backend, baseURI, name, symbol)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Mytoken{MytokenCaller: MytokenCaller{contract: contract}, MytokenTransactor: MytokenTransactor{contract: contract}, MytokenFilterer: MytokenFilterer{contract: contract}}, nil
}

// Mytoken is an auto generated Go binding around an Ethereum contract.
type Mytoken struct {
	MytokenCaller     // Read-only binding to the contract
	MytokenTransactor // Write-only binding to the contract
	MytokenFilterer   // Log filterer for contract events
}

// MytokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type MytokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MytokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MytokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MytokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MytokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MytokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MytokenSession struct {
	Contract     *Mytoken          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MytokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MytokenCallerSession struct {
	Contract *MytokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// MytokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MytokenTransactorSession struct {
	Contract     *MytokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// MytokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type MytokenRaw struct {
	Contract *Mytoken // Generic contract binding to access the raw methods on
}

// MytokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MytokenCallerRaw struct {
	Contract *MytokenCaller // Generic read-only contract binding to access the raw methods on
}

// MytokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MytokenTransactorRaw struct {
	Contract *MytokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMytoken creates a new instance of Mytoken, bound to a specific deployed contract.
func NewMytoken(address common.Address, backend bind.ContractBackend) (*Mytoken, error) {
	contract, err := bindMytoken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Mytoken{MytokenCaller: MytokenCaller{contract: contract}, MytokenTransactor: MytokenTransactor{contract: contract}, MytokenFilterer: MytokenFilterer{contract: contract}}, nil
}

// NewMytokenCaller creates a new read-only instance of Mytoken, bound to a specific deployed contract.
func NewMytokenCaller(address common.Address, caller bind.ContractCaller) (*MytokenCaller, error) {
	contract, err := bindMytoken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MytokenCaller{contract: contract}, nil
}

// NewMytokenTransactor creates a new write-only instance of Mytoken, bound to a specific deployed contract.
func NewMytokenTransactor(address common.Address, transactor bind.ContractTransactor) (*MytokenTransactor, error) {
	contract, err := bindMytoken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MytokenTransactor{contract: contract}, nil
}

// NewMytokenFilterer creates a new log filterer instance of Mytoken, bound to a specific deployed contract.
func NewMytokenFilterer(address common.Address, filterer bind.ContractFilterer) (*MytokenFilterer, error) {
	contract, err := bindMytoken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MytokenFilterer{contract: contract}, nil
}

// bindMytoken binds a generic wrapper to an already deployed contract.
func bindMytoken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MytokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Mytoken *MytokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Mytoken.Contract.MytokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Mytoken *MytokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Mytoken.Contract.MytokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Mytoken *MytokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Mytoken.Contract.MytokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Mytoken *MytokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Mytoken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Mytoken *MytokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Mytoken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Mytoken *MytokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Mytoken.Contract.contract.Transact(opts, method, params...)
}

// MAXPERMINT is a free data retrieval call binding the contract method 0x09d42b30.
//
// Solidity: function MAX_PER_MINT() view returns(uint256)
func (_Mytoken *MytokenCaller) MAXPERMINT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Mytoken.contract.Call(opts, &out, "MAX_PER_MINT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXPERMINT is a free data retrieval call binding the contract method 0x09d42b30.
//
// Solidity: function MAX_PER_MINT() view returns(uint256)
func (_Mytoken *MytokenSession) MAXPERMINT() (*big.Int, error) {
	return _Mytoken.Contract.MAXPERMINT(&_Mytoken.CallOpts)
}

// MAXPERMINT is a free data retrieval call binding the contract method 0x09d42b30.
//
// Solidity: function MAX_PER_MINT() view returns(uint256)
func (_Mytoken *MytokenCallerSession) MAXPERMINT() (*big.Int, error) {
	return _Mytoken.Contract.MAXPERMINT(&_Mytoken.CallOpts)
}

// MAXSUPPLY is a free data retrieval call binding the contract method 0x32cb6b0c.
//
// Solidity: function MAX_SUPPLY() view returns(uint256)
func (_Mytoken *MytokenCaller) MAXSUPPLY(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Mytoken.contract.Call(opts, &out, "MAX_SUPPLY")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXSUPPLY is a free data retrieval call binding the contract method 0x32cb6b0c.
//
// Solidity: function MAX_SUPPLY() view returns(uint256)
func (_Mytoken *MytokenSession) MAXSUPPLY() (*big.Int, error) {
	return _Mytoken.Contract.MAXSUPPLY(&_Mytoken.CallOpts)
}

// MAXSUPPLY is a free data retrieval call binding the contract method 0x32cb6b0c.
//
// Solidity: function MAX_SUPPLY() view returns(uint256)
func (_Mytoken *MytokenCallerSession) MAXSUPPLY() (*big.Int, error) {
	return _Mytoken.Contract.MAXSUPPLY(&_Mytoken.CallOpts)
}

// PRICE is a free data retrieval call binding the contract method 0x8d859f3e.
//
// Solidity: function PRICE() view returns(uint256)
func (_Mytoken *MytokenCaller) PRICE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Mytoken.contract.Call(opts, &out, "PRICE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PRICE is a free data retrieval call binding the contract method 0x8d859f3e.
//
// Solidity: function PRICE() view returns(uint256)
func (_Mytoken *MytokenSession) PRICE() (*big.Int, error) {
	return _Mytoken.Contract.PRICE(&_Mytoken.CallOpts)
}

// PRICE is a free data retrieval call binding the contract method 0x8d859f3e.
//
// Solidity: function PRICE() view returns(uint256)
func (_Mytoken *MytokenCallerSession) PRICE() (*big.Int, error) {
	return _Mytoken.Contract.PRICE(&_Mytoken.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Mytoken *MytokenCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Mytoken.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Mytoken *MytokenSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Mytoken.Contract.BalanceOf(&_Mytoken.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Mytoken *MytokenCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Mytoken.Contract.BalanceOf(&_Mytoken.CallOpts, owner)
}

// BaseTokenURI is a free data retrieval call binding the contract method 0xd547cfb7.
//
// Solidity: function baseTokenURI() view returns(string)
func (_Mytoken *MytokenCaller) BaseTokenURI(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Mytoken.contract.Call(opts, &out, "baseTokenURI")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// BaseTokenURI is a free data retrieval call binding the contract method 0xd547cfb7.
//
// Solidity: function baseTokenURI() view returns(string)
func (_Mytoken *MytokenSession) BaseTokenURI() (string, error) {
	return _Mytoken.Contract.BaseTokenURI(&_Mytoken.CallOpts)
}

// BaseTokenURI is a free data retrieval call binding the contract method 0xd547cfb7.
//
// Solidity: function baseTokenURI() view returns(string)
func (_Mytoken *MytokenCallerSession) BaseTokenURI() (string, error) {
	return _Mytoken.Contract.BaseTokenURI(&_Mytoken.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Mytoken *MytokenCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Mytoken.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Mytoken *MytokenSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Mytoken.Contract.GetApproved(&_Mytoken.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Mytoken *MytokenCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Mytoken.Contract.GetApproved(&_Mytoken.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Mytoken *MytokenCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Mytoken.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Mytoken *MytokenSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Mytoken.Contract.IsApprovedForAll(&_Mytoken.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Mytoken *MytokenCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Mytoken.Contract.IsApprovedForAll(&_Mytoken.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Mytoken *MytokenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Mytoken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Mytoken *MytokenSession) Name() (string, error) {
	return _Mytoken.Contract.Name(&_Mytoken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Mytoken *MytokenCallerSession) Name() (string, error) {
	return _Mytoken.Contract.Name(&_Mytoken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Mytoken *MytokenCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Mytoken.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Mytoken *MytokenSession) Owner() (common.Address, error) {
	return _Mytoken.Contract.Owner(&_Mytoken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Mytoken *MytokenCallerSession) Owner() (common.Address, error) {
	return _Mytoken.Contract.Owner(&_Mytoken.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Mytoken *MytokenCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Mytoken.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Mytoken *MytokenSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Mytoken.Contract.OwnerOf(&_Mytoken.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Mytoken *MytokenCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Mytoken.Contract.OwnerOf(&_Mytoken.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Mytoken *MytokenCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Mytoken.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Mytoken *MytokenSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Mytoken.Contract.SupportsInterface(&_Mytoken.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Mytoken *MytokenCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Mytoken.Contract.SupportsInterface(&_Mytoken.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Mytoken *MytokenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Mytoken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Mytoken *MytokenSession) Symbol() (string, error) {
	return _Mytoken.Contract.Symbol(&_Mytoken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Mytoken *MytokenCallerSession) Symbol() (string, error) {
	return _Mytoken.Contract.Symbol(&_Mytoken.CallOpts)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Mytoken *MytokenCaller) TokenByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Mytoken.contract.Call(opts, &out, "tokenByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Mytoken *MytokenSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _Mytoken.Contract.TokenByIndex(&_Mytoken.CallOpts, index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Mytoken *MytokenCallerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _Mytoken.Contract.TokenByIndex(&_Mytoken.CallOpts, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Mytoken *MytokenCaller) TokenOfOwnerByIndex(opts *bind.CallOpts, owner common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Mytoken.contract.Call(opts, &out, "tokenOfOwnerByIndex", owner, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Mytoken *MytokenSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _Mytoken.Contract.TokenOfOwnerByIndex(&_Mytoken.CallOpts, owner, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Mytoken *MytokenCallerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _Mytoken.Contract.TokenOfOwnerByIndex(&_Mytoken.CallOpts, owner, index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Mytoken *MytokenCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _Mytoken.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Mytoken *MytokenSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Mytoken.Contract.TokenURI(&_Mytoken.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Mytoken *MytokenCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Mytoken.Contract.TokenURI(&_Mytoken.CallOpts, tokenId)
}

// TokensOfOwner is a free data retrieval call binding the contract method 0x8462151c.
//
// Solidity: function tokensOfOwner(address _owner) view returns(uint256[])
func (_Mytoken *MytokenCaller) TokensOfOwner(opts *bind.CallOpts, _owner common.Address) ([]*big.Int, error) {
	var out []interface{}
	err := _Mytoken.contract.Call(opts, &out, "tokensOfOwner", _owner)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// TokensOfOwner is a free data retrieval call binding the contract method 0x8462151c.
//
// Solidity: function tokensOfOwner(address _owner) view returns(uint256[])
func (_Mytoken *MytokenSession) TokensOfOwner(_owner common.Address) ([]*big.Int, error) {
	return _Mytoken.Contract.TokensOfOwner(&_Mytoken.CallOpts, _owner)
}

// TokensOfOwner is a free data retrieval call binding the contract method 0x8462151c.
//
// Solidity: function tokensOfOwner(address _owner) view returns(uint256[])
func (_Mytoken *MytokenCallerSession) TokensOfOwner(_owner common.Address) ([]*big.Int, error) {
	return _Mytoken.Contract.TokensOfOwner(&_Mytoken.CallOpts, _owner)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Mytoken *MytokenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Mytoken.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Mytoken *MytokenSession) TotalSupply() (*big.Int, error) {
	return _Mytoken.Contract.TotalSupply(&_Mytoken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Mytoken *MytokenCallerSession) TotalSupply() (*big.Int, error) {
	return _Mytoken.Contract.TotalSupply(&_Mytoken.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Mytoken *MytokenTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Mytoken.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Mytoken *MytokenSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Mytoken.Contract.Approve(&_Mytoken.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Mytoken *MytokenTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Mytoken.Contract.Approve(&_Mytoken.TransactOpts, to, tokenId)
}

// MintNFTs is a paid mutator transaction binding the contract method 0x3b4b1381.
//
// Solidity: function mintNFTs(uint256 _count) payable returns()
func (_Mytoken *MytokenTransactor) MintNFTs(opts *bind.TransactOpts, _count *big.Int) (*types.Transaction, error) {
	return _Mytoken.contract.Transact(opts, "mintNFTs", _count)
}

// MintNFTs is a paid mutator transaction binding the contract method 0x3b4b1381.
//
// Solidity: function mintNFTs(uint256 _count) payable returns()
func (_Mytoken *MytokenSession) MintNFTs(_count *big.Int) (*types.Transaction, error) {
	return _Mytoken.Contract.MintNFTs(&_Mytoken.TransactOpts, _count)
}

// MintNFTs is a paid mutator transaction binding the contract method 0x3b4b1381.
//
// Solidity: function mintNFTs(uint256 _count) payable returns()
func (_Mytoken *MytokenTransactorSession) MintNFTs(_count *big.Int) (*types.Transaction, error) {
	return _Mytoken.Contract.MintNFTs(&_Mytoken.TransactOpts, _count)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Mytoken *MytokenTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Mytoken.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Mytoken *MytokenSession) RenounceOwnership() (*types.Transaction, error) {
	return _Mytoken.Contract.RenounceOwnership(&_Mytoken.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Mytoken *MytokenTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Mytoken.Contract.RenounceOwnership(&_Mytoken.TransactOpts)
}

// ReserveNFTs is a paid mutator transaction binding the contract method 0xbc7df091.
//
// Solidity: function reserveNFTs(uint256 _count) returns()
func (_Mytoken *MytokenTransactor) ReserveNFTs(opts *bind.TransactOpts, _count *big.Int) (*types.Transaction, error) {
	return _Mytoken.contract.Transact(opts, "reserveNFTs", _count)
}

// ReserveNFTs is a paid mutator transaction binding the contract method 0xbc7df091.
//
// Solidity: function reserveNFTs(uint256 _count) returns()
func (_Mytoken *MytokenSession) ReserveNFTs(_count *big.Int) (*types.Transaction, error) {
	return _Mytoken.Contract.ReserveNFTs(&_Mytoken.TransactOpts, _count)
}

// ReserveNFTs is a paid mutator transaction binding the contract method 0xbc7df091.
//
// Solidity: function reserveNFTs(uint256 _count) returns()
func (_Mytoken *MytokenTransactorSession) ReserveNFTs(_count *big.Int) (*types.Transaction, error) {
	return _Mytoken.Contract.ReserveNFTs(&_Mytoken.TransactOpts, _count)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Mytoken *MytokenTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Mytoken.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Mytoken *MytokenSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Mytoken.Contract.SafeTransferFrom(&_Mytoken.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Mytoken *MytokenTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Mytoken.Contract.SafeTransferFrom(&_Mytoken.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Mytoken *MytokenTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Mytoken.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Mytoken *MytokenSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Mytoken.Contract.SafeTransferFrom0(&_Mytoken.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Mytoken *MytokenTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Mytoken.Contract.SafeTransferFrom0(&_Mytoken.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Mytoken *MytokenTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _Mytoken.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Mytoken *MytokenSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Mytoken.Contract.SetApprovalForAll(&_Mytoken.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Mytoken *MytokenTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Mytoken.Contract.SetApprovalForAll(&_Mytoken.TransactOpts, operator, approved)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string _baseTokenURI) returns()
func (_Mytoken *MytokenTransactor) SetBaseURI(opts *bind.TransactOpts, _baseTokenURI string) (*types.Transaction, error) {
	return _Mytoken.contract.Transact(opts, "setBaseURI", _baseTokenURI)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string _baseTokenURI) returns()
func (_Mytoken *MytokenSession) SetBaseURI(_baseTokenURI string) (*types.Transaction, error) {
	return _Mytoken.Contract.SetBaseURI(&_Mytoken.TransactOpts, _baseTokenURI)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string _baseTokenURI) returns()
func (_Mytoken *MytokenTransactorSession) SetBaseURI(_baseTokenURI string) (*types.Transaction, error) {
	return _Mytoken.Contract.SetBaseURI(&_Mytoken.TransactOpts, _baseTokenURI)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Mytoken *MytokenTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Mytoken.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Mytoken *MytokenSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Mytoken.Contract.TransferFrom(&_Mytoken.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Mytoken *MytokenTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Mytoken.Contract.TransferFrom(&_Mytoken.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Mytoken *MytokenTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Mytoken.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Mytoken *MytokenSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Mytoken.Contract.TransferOwnership(&_Mytoken.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Mytoken *MytokenTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Mytoken.Contract.TransferOwnership(&_Mytoken.TransactOpts, newOwner)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() payable returns()
func (_Mytoken *MytokenTransactor) Withdraw(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Mytoken.contract.Transact(opts, "withdraw")
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() payable returns()
func (_Mytoken *MytokenSession) Withdraw() (*types.Transaction, error) {
	return _Mytoken.Contract.Withdraw(&_Mytoken.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() payable returns()
func (_Mytoken *MytokenTransactorSession) Withdraw() (*types.Transaction, error) {
	return _Mytoken.Contract.Withdraw(&_Mytoken.TransactOpts)
}

// MytokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Mytoken contract.
type MytokenApprovalIterator struct {
	Event *MytokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MytokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MytokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MytokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MytokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MytokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MytokenApproval represents a Approval event raised by the Mytoken contract.
type MytokenApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Mytoken *MytokenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*MytokenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Mytoken.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &MytokenApprovalIterator{contract: _Mytoken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Mytoken *MytokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *MytokenApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Mytoken.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MytokenApproval)
				if err := _Mytoken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Mytoken *MytokenFilterer) ParseApproval(log types.Log) (*MytokenApproval, error) {
	event := new(MytokenApproval)
	if err := _Mytoken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MytokenApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Mytoken contract.
type MytokenApprovalForAllIterator struct {
	Event *MytokenApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MytokenApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MytokenApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MytokenApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MytokenApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MytokenApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MytokenApprovalForAll represents a ApprovalForAll event raised by the Mytoken contract.
type MytokenApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Mytoken *MytokenFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*MytokenApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Mytoken.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &MytokenApprovalForAllIterator{contract: _Mytoken.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Mytoken *MytokenFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *MytokenApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Mytoken.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MytokenApprovalForAll)
				if err := _Mytoken.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Mytoken *MytokenFilterer) ParseApprovalForAll(log types.Log) (*MytokenApprovalForAll, error) {
	event := new(MytokenApprovalForAll)
	if err := _Mytoken.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MytokenOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Mytoken contract.
type MytokenOwnershipTransferredIterator struct {
	Event *MytokenOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MytokenOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MytokenOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MytokenOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MytokenOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MytokenOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MytokenOwnershipTransferred represents a OwnershipTransferred event raised by the Mytoken contract.
type MytokenOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Mytoken *MytokenFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*MytokenOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Mytoken.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &MytokenOwnershipTransferredIterator{contract: _Mytoken.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Mytoken *MytokenFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *MytokenOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Mytoken.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MytokenOwnershipTransferred)
				if err := _Mytoken.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Mytoken *MytokenFilterer) ParseOwnershipTransferred(log types.Log) (*MytokenOwnershipTransferred, error) {
	event := new(MytokenOwnershipTransferred)
	if err := _Mytoken.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MytokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Mytoken contract.
type MytokenTransferIterator struct {
	Event *MytokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MytokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MytokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MytokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MytokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MytokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MytokenTransfer represents a Transfer event raised by the Mytoken contract.
type MytokenTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Mytoken *MytokenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*MytokenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Mytoken.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &MytokenTransferIterator{contract: _Mytoken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Mytoken *MytokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *MytokenTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Mytoken.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MytokenTransfer)
				if err := _Mytoken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Mytoken *MytokenFilterer) ParseTransfer(log types.Log) (*MytokenTransfer, error) {
	event := new(MytokenTransfer)
	if err := _Mytoken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
