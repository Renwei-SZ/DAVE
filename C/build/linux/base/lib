#!/bin/bash

PROJECT=${PWD##*/}
PROJECT=${PROJECT^^}
BASELIBNAME=liblinuxBASE
LEVEL=$1
LOGFILE=build_lib_log.txt
HOMEPATH=$(cd `dirname $0`; pwd)

############## build_lib function ##############
build_static_lib()
{
   obj_list=$(find `pwd`/../../../project/public -name '*.o')

   echo lib copy ${HOMEPATH}/../../../project/public/base/inc to ${HOMEPATH}/../../../../Go/project/public/base/inc
   cp -r ${HOMEPATH}/../../../project/public/base/inc/* ${HOMEPATH}/../../../../Go/project/public/base/inc
   rm -f ${HOMEPATH}/../../../../Go/project/public/base/lib/${BASELIBNAME}.a
   echo lib build ${HOMEPATH}/../../../../Go/project/public/base/lib/${BASELIBNAME}.a
   ar cru ${HOMEPATH}/../../../../Go/project/public/base/lib/${BASELIBNAME}.a ${obj_list}

   echo lib build ${HOMEPATH}/../../../../C/project/public/base/lib/${LEVEL}/${BASELIBNAME}.a
   ar cru ${HOMEPATH}/../../../../C/project/public/base/lib/${LEVEL}/${BASELIBNAME}.a ${obj_list}
}

build_dynamic_lib()
{
   obj_list=$(find `pwd`/../../../project/public -name '*.o')

   rm -f ${HOMEPATH}/../../../../Python/project/public/base/lib/${BASELIBNAME}.so
   echo lib build ${HOMEPATH}/../../../../Python/project/public/base/lib/${BASELIBNAME}.so
   gcc -lpthread -lrt -ldl -lm -shared -o ${HOMEPATH}/../../../../Python/project/public/base/lib/${BASELIBNAME}.so ${obj_list}
}

build_lib()
{
   ./clean >> $LOGFILE

   echo lib build $LEVEL ...
   ./build $LEVEL >> $LOGFILE

   build_dynamic_lib
   build_static_lib
}
############## build_lib function ##############

if [ "$LEVEL" == "" ] || [ "$LEVEL" == "alpha" ]; then
   LEVEL=alpha
   build_lib
fi

if [ "$LEVEL" == "beta" ]; then
   LEVEL=beta
   build_lib
fi

if [ "$LEVEL" == "all" ]; then
   LEVEL=alpha
   build_lib

   LEVEL=beta
   build_lib
fi

./clean >> $LOGFILE

rm -rf $LOGFILE